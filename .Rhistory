# a. fit a linear model using all Predictors
formula = Rating~.
fit = stats::lm(formula = formula, data = dat)
fit                                                # observe coefficients
sm_stats = summary(fit)                            # observe summary statistics
sm_stats
library(sos)
findFn("hidden.extrap", maxPages=10, sortby="MaxScore")   # give a word-string like similarity it returns matches
dir_dat = '/home/lampros/Desktop/freelancher_platforms/Upwork_Freelancer_PROPOSALS/Application_of_R_package_Imagefluency_23_04_2021/UPDATES/self_supervised_learning/Jake_Google_fonts_pdf'
dir_save = '/home/lampros/Desktop/freelancher_platforms/Upwork_Freelancer_PROPOSALS/Application_of_R_package_Imagefluency_23_04_2021/UPDATES/self_supervised_learning/Jake_Google_fonts_png'
lst = list.files(dir_dat, full.names = F, pattern = '.pdf')
length(lst)
# table(tools::file_ext(lst))
dat = lapply(1:length(lst), function(x) {
img = magick::image_read_pdf(path = file.path(dir_dat, lst[x]))
img_conv = magick::image_resize(image = img,
geometry = "512x192!",
filter = 'Lanczos')
# img_out = magick::image_data(img_conv)
# dim(img_out[1:3,,])
magick::image_write(image = img_conv, path = file.path(dir_save, gsub('.pdf', '.png', lst[x])), format = 'png')
})
dir_dat = '/home/lampros/Desktop/freelancher_platforms/Upwork_Freelancer_PROPOSALS/Application_of_R_package_Imagefluency_23_04_2021/UPDATES/self_supervised_learning/Joker_UpperCase_pdf'
dir_save = '/home/lampros/Desktop/freelancher_platforms/Upwork_Freelancer_PROPOSALS/Application_of_R_package_Imagefluency_23_04_2021/UPDATES/self_supervised_learning/Joker_UpperCase_png'
lst = list.files(dir_dat, full.names = F, pattern = '.pdf')
length(lst)
# table(tools::file_ext(lst))
dat = lapply(1:length(lst), function(x) {
img = magick::image_read_pdf(path = file.path(dir_dat, lst[x]))
img_conv = magick::image_resize(image = img,
geometry = "512x192!",
filter = 'Lanczos')
# img_out = magick::image_data(img_conv)
# dim(img_out[1:3,,])
# magick::image_write(image = img_conv, path = file.path(dir_save, gsub('.pdf', '.png', lst[x])), format = 'png')
})
dir_dat = '/home/lampros/Desktop/freelancher_platforms/Upwork_Freelancer_PROPOSALS/Application_of_R_package_Imagefluency_23_04_2021/UPDATES/self_supervised_learning/Joker_UpperCase_pdf'
dir_save = '/home/lampros/Desktop/freelancher_platforms/Upwork_Freelancer_PROPOSALS/Application_of_R_package_Imagefluency_23_04_2021/UPDATES/self_supervised_learning/Joker_UpperCase_png'
lst = list.files(dir_dat, full.names = F, pattern = '.pdf')
length(lst)
# table(tools::file_ext(lst))
dat = lapply(1:length(lst), function(x) {
img = magick::image_read_pdf(path = file.path(dir_dat, lst[x]))
img_conv = magick::image_resize(image = img,
geometry = "512x192!",
filter = 'Lanczos')
img_out = magick::image_data(img_conv)
dim(img_out[1:3,,])
# magick::image_write(image = img_conv, path = file.path(dir_save, gsub('.pdf', '.png', lst[x])), format = 'png')
})
dat = lapply(1:length(lst), function(x) {
img = magick::image_read_pdf(path = file.path(dir_dat, lst[x]))
# img_conv = magick::image_resize(image = img,
#                            geometry = "512x192!",
#                            filter = 'Lanczos')
img_out = magick::image_data(img)
# img_out = magick::image_data(img_conv)
dim(img_out[1:3,,])
# magick::image_write(image = img_conv, path = file.path(dir_save, gsub('.pdf', '.png', lst[x])), format = 'png')
})
dat = do.call(rbind, dat)
summary(dat)
dat = lapply(1:length(lst), function(x) {
img = magick::image_read_pdf(path = file.path(dir_dat, lst[x]))
img_conv = magick::image_resize(image = img,
geometry = "512x192!",
filter = 'Lanczos')
# img_out = magick::image_data(img)
img_out = magick::image_data(img_conv)
dim(img_out[1:3,,])
# magick::image_write(image = img_conv, path = file.path(dir_save, gsub('.pdf', '.png', lst[x])), format = 'png')
})
dat = do.call(rbind, dat)
summary(dat)
dir_dat = '/home/lampros/Desktop/freelancher_platforms/Upwork_Freelancer_PROPOSALS/Application_of_R_package_Imagefluency_23_04_2021/UPDATES/self_supervised_learning/Joker_UpperCase_pdf'
dir_save = '/home/lampros/Desktop/freelancher_platforms/Upwork_Freelancer_PROPOSALS/Application_of_R_package_Imagefluency_23_04_2021/UPDATES/self_supervised_learning/Joker_UpperCase_png'
lst = list.files(dir_dat, full.names = F, pattern = '.pdf')
length(lst)
# table(tools::file_ext(lst))
dat = lapply(1:length(lst), function(x) {
img = magick::image_read_pdf(path = file.path(dir_dat, lst[x]))
img_conv = magick::image_resize(image = img,
geometry = "512x192!",
filter = 'Lanczos')
# img_out = magick::image_data(img)
# img_out = magick::image_data(img_conv)
# dim(img_out[1:3,,])
magick::image_write(image = img_conv, path = file.path(dir_save, gsub('.pdf', '.png', lst[x])), format = 'png')
})
Sys.setenv("GCE_AUTH_FILE" = "/home/lampros/.httr-oauth")
the_list = googleComputeEngineR::gce_list_instances(project = 'gc-project-242606', zone = 'europe-west3-a')
Sys.setenv("GCE_AUTH_FILE" = "/home/lampros/gc-gcloud_cloud_run.json")
the_list = googleComputeEngineR::gce_list_instances(project = 'gc-project-242606', zone = 'europe-west3-a')
rst = raster::raster('/home/lampros/Downloads/DIR/DEST.tif')
rst
rst = raster::brick('/home/lampros/Downloads/DIR/DEST_CROPPED_1.tif')
rst
rst = raster::brick('/home/lampros/Downloads/DIR/DEST_CROPPED_1.tif')
rst
dim(rst)
d = readRDS('/home/lampros/add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon/data/adm_ar.RDS')
d
d = readRDS('/home/lampros/add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon/data/adm_ar.RDS')
colnames(d)
d$osm_id
which(d$osm_id == "2079654")
which(d$osm_id == "2077371")
shiny::runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
d = data.table::fread('/home/lampros/add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_app/AOD_55_47/AOD_47.csv')
dim(d)
length(unique(d$enum))
load_green_spaces = readRDS('/home/lampros/add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon/data/municipality_contains_green_spaces.RDS')
load_green_spaces$cluster
length(load_green_spaces$cluster)
length(unique(load_green_spaces$cluster))
summary(diff(load_green_spaces$cluster))
diff(load_green_spaces$cluster)
dd = split(d, by = 'date')
length(dd)
f = dd[[1]]
summary(diff(d$enum))
summary(lag(d$enum))
summary(diff(f$enum))
require(rStrava)
shapely = reticulate::import('shapely', convert = F)
options(digits = 8)
#..........................................................................   [ HOTMAIL.COM ]
app_name = 'upwork_task'
app_client_id = '60767'
app_secret = '5d7b9daa61809c79531cfc39da7ddab7ef924b04'                       # this is the 'Client Secret' based on which I receive the 'Access Token' to work with the package
# google_polyline_key = 'AIzaSyAWweLYthhJYoHV0zmEJaXh3dmklnM9lxU'               # required for the 'polyline' decoding  [ I had to enable the Elevation API, it does not have daily usage restriction (SEE: https://developers.google.com/maps/documentation/elevation/usage-and-billing?hl=en_GB#other-usage-limits) HOWEVER it does NOT have free quota ]
# create the authentication token
stoken = httr::config(token = strava_oauth(app_name, app_client_id, app_secret, app_scope = "activity:read_all"))
pth_wkt = '/home/lampros/Desktop/freelancher_platforms/geospatial/STRAVA_API_riding_running/map.wkt'
wkt = trimws(readLines(pth_wkt, warn = F), which = 'both')
wkt
shap_plg = shapely$wkt$loads(wkt)
shap_bnds = shap_plg$bounds                                          # SEE:  https://stackoverflow.com/a/20100700
shap_bnds = reticulate::py_to_r(shap_bnds)
shap_bnds = as.vector(unlist(shap_bnds))
shap_bnds = paste(shap_bnds[c(2,1,4,3)], collapse = ', ')            # re-order the coordinates so that the latitude comes first [ this is what the STRAVA API expects ]
shap_bnds
ACTIVITY = 'running'        # or 'running'   [ !!!!!!! MAKE SURE THAT I INCLUDE BOTH !!!!!!! ]
1
# ROOT_DIR = '/root'
ROOT_DIR = Sys.getenv('HOME')                                    # !!!!! USE THIS FILE-PATH FROM MY PC for debugging  !!!!!!
default_ladsweb_modaps_url = 'https://ladsweb.modaps.eosdis.nasa.gov/archive/allData'          # this url is required to download the 'MCD19A2' data
BQ_PARAMS = list(GC_project = 'gc-project-242606',
GC_dataset = 'nasa_firms',
GC_table = 'aeronet_modis_mcd19a2',
bq_auth_list = list(email = 'mouselimislampros@gmail.com',
path = file.path(ROOT_DIR, 'oauth2_creds_yagmail.json')),
gargle_dir_path = file.path(ROOT_DIR, ".R/gargle/gargle-oauth"))
billing = "01D350-FE3B9D-276D33"
# DATE = as.character(Sys.Date() - 12)               # as date use the current date minus 12 days (it will run every day with a different date)       [ currently for 'NO2' the download date is Sys.Date() - 11 ]
DATE = '2021-06-07'
resolution = 13
thresh_aot_distance = 7000                         # distance threshold between the satellite and the AERONET measurement  (spatial resolution is 7.0 x 7.0 km^2 for the NIR band, SEE: http://www.doas-bremen.de/meetings/prescribe_2013/Veefkind_PRESCRIBE_2013.pdf , page 5)
#***********************************************************************************************************
cat("Enable Authentication for BigQuery using 'options()' and 'gargle_oauth_email' ...\n")
options(gargle_oauth_cache = BQ_PARAMS$gargle_dir_path, gargle_oauth_email = BQ_PARAMS$bq_auth_list$email)
cat("Bigquery authentication ...\n")
do.call(bigrquery::bq_auth, BQ_PARAMS$bq_auth_list)
#***********************************************************************************************************
cat(glue::glue("Does the 'oauth2.json' file exist?  {file.exists(BQ_PARAMS$bq_auth_list$path)}"), '\n')
cat(glue::glue("Does the 'gargle' directory exist?  {dir.exists(BQ_PARAMS$gargle_dir_path)}"), '\n')
shiny::runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp()
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
1
pth = '/home/lampros/add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon/data/Sentinel_2ard_green_spaces/osm_ID_2075979_enum_661.tif'
dat = tiff::readTIFF(source = pth, all = TRUE, convert = TRUE)
dim(dat)
str(dat)
str(dat[[1]])
OpenImageR::imageShow(dat[[1]])
shiny::runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp()
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
?shiny::renderImage
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
?mapview::mapshot
leaflet_bbox = function(sf_obj,
leaflet_provider = leaflet::providers$Esri.WorldImagery,     # for an overview of leaflet-providers, SEE:  https://leaflet-extras.github.io/leaflet-providers/preview/
opacity = 1.0,                                               # set the opacity to 1.0 due to an issue (see: https://github.com/r-spatial/leafgl/issues/4#issuecomment-434323097 )
popup = NULL,                                                # this parameter can be either NULL or a character string specifying a single data column (attribute) of the .geojson file [ ONLY a single column can be rendered currently see the  file  https://github.com/r-spatial/leafgl#what-does-it-do for more info ]
option_viewer = NULL) {                                      # or rstudioapi::viewer
options(viewer = option_viewer)
bbox_vec = sf::st_bbox(sf_obj)
bbox_vec = as.vector(bbox_vec)
leaflet_fitBounds_bbox = list(xmin = bbox_vec[1],
ymin = bbox_vec[2],
xmax = bbox_vec[3],
ymax = bbox_vec[4])
lft = leaflet::leaflet()
lft = leaflet::addProviderTiles(map = lft,
provider = leaflet_provider)
lft = leafgl::addGlPolygons(map = lft,
data = sf_obj,
color = 'purple',
opacity = opacity,
popup = popup)
lft = leaflet::fitBounds(map = lft,
lng1 = leaflet_fitBounds_bbox$xmin,
lat1 = leaflet_fitBounds_bbox$ymin,
lng2 = leaflet_fitBounds_bbox$xmax,
lat2 = leaflet_fitBounds_bbox$ymax)
return(lft)
}
pth = '/home/lampros/add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon/data/municipality_contains_green_spaces.RDS'
dat = readRDS(pth)
dat
idx = 2
dat_obj = dat[idx, ]
dat_obj
leaflet_bbox = function(sf_obj,
leaflet_provider = leaflet::providers$Esri.WorldImagery,     # for an overview of leaflet-providers, SEE:  https://leaflet-extras.github.io/leaflet-providers/preview/
opacity = 1.0,                                               # set the opacity to 1.0 due to an issue (see: https://github.com/r-spatial/leafgl/issues/4#issuecomment-434323097 )
popup = NULL,                                                # this parameter can be either NULL or a character string specifying a single data column (attribute) of the .geojson file [ ONLY a single column can be rendered currently see the  file  https://github.com/r-spatial/leafgl#what-does-it-do for more info ]
option_viewer = NULL) {                                      # or rstudioapi::viewer
options(viewer = option_viewer)
bbox_vec = sf::st_bbox(sf_obj)
bbox_vec = as.vector(bbox_vec)
leaflet_fitBounds_bbox = list(xmin = bbox_vec[1],
ymin = bbox_vec[2],
xmax = bbox_vec[3],
ymax = bbox_vec[4])
lft = leaflet::leaflet()
lft = leaflet::addProviderTiles(map = lft,
provider = leaflet_provider)
lft = leafgl::addGlPolygons(map = lft,
data = sf_obj,
color = 'purple',
opacity = opacity,
popup = popup)
lft = leaflet::fitBounds(map = lft,
lng1 = leaflet_fitBounds_bbox$xmin,
lat1 = leaflet_fitBounds_bbox$ymin,
lng2 = leaflet_fitBounds_bbox$xmax,
lat2 = leaflet_fitBounds_bbox$ymax)
return(lft)
}
lft_res = leaflet_bbox(sf_obj = dat_obj,
leaflet_provider = leaflet::providers$Esri.WorldImagery,
opacity = 1.0,
popup = NULL,
option_viewer = rstudioapi::viewer)
leaflet_bbox = function(sf_obj,
leaflet_provider = leaflet::providers$Esri.WorldImagery,     # for an overview of leaflet-providers, SEE:  https://leaflet-extras.github.io/leaflet-providers/preview/
opacity = 1.0,                                               # set the opacity to 1.0 due to an issue (see: https://github.com/r-spatial/leafgl/issues/4#issuecomment-434323097 )
popup = NULL,                                                # this parameter can be either NULL or a character string specifying a single data column (attribute) of the .geojson file [ ONLY a single column can be rendered currently see the  file  https://github.com/r-spatial/leafgl#what-does-it-do for more info ]
option_viewer = NULL) {                                      # or rstudioapi::viewer
options(viewer = option_viewer)
bbox_vec = sf::st_bbox(sf_obj)
bbox_vec = as.vector(bbox_vec)
leaflet_fitBounds_bbox = list(xmin = bbox_vec[1],
ymin = bbox_vec[2],
xmax = bbox_vec[3],
ymax = bbox_vec[4])
lft = leaflet::leaflet()
lft = leaflet::addProviderTiles(map = lft,
provider = leaflet_provider)
lft = leaflet::addPolygons(map = lft,
data = sf_obj,
color = 'purple',
opacity = opacity,
popup = popup)
lft = leaflet::fitBounds(map = lft,
lng1 = leaflet_fitBounds_bbox$xmin,
lat1 = leaflet_fitBounds_bbox$ymin,
lng2 = leaflet_fitBounds_bbox$xmax,
lat2 = leaflet_fitBounds_bbox$ymax)
return(lft)
}
lft_res = leaflet_bbox(sf_obj = dat_obj,
leaflet_provider = leaflet::providers$Esri.WorldImagery,
opacity = 1.0,
popup = NULL,
option_viewer = rstudioapi::viewer)
lft_res
dat_obj
mapview::mapshot(x = lft_res, file = '/home/lampros/Downloads/TMP.png')
mapview::mapshot(x = lft_res,
vwidth = 992,
vheight = 744,
zoom = 2,
file = '/home/lampros/Downloads/TMP1.png')
mapview::mapshot(x = lft_res,
vwidth = 375,
vheight = 375,
zoom = 2,
file = '/home/lampros/Downloads/TMP2.png')
mapview::mapshot(x = lft_res,
vwidth = 450,
vheight = 450,
zoom = 2,
file = '/home/lampros/Downloads/TMP3.png')
tmp_file = tempfile(fileext = '.png')
mapview::mapshot(x = lft_res,
vwidth = 450,
vheight = 450,
zoom = 1,
file = '/home/lampros/Downloads/TMP5.png')
mapview::mapshot(x = lft_res,
vwidth = 450,
vheight = 450,
zoom = 2,
file = '/home/lampros/Downloads/TMP6.png')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
install.packages("osrm")
install.packages("osrm")
remotes::install_github('riatelab/osrm')
install.packages("osrm")
wkt = 'POINT (23.773341178894043 37.96967721389383)'
my_location = sf::st_as_sfc(x = wkt, crs = 4326)
my_location
install.packages("maptiles")
install.packages("mapsf")
pth = '/home/lampros/add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon/data/municipality_contains_green_spaces.RDS'
dat = readRDS(pth)
dat
idx = 4
sf_obj = dat[idx, ]
sf_obj = dat[idx, ]
sf_obj
route = osrm::osrmRoute(src = my_location,
dst = sf_obj,
overview = "full",
returnclass = "sf")
library(osrm)
data(berlin)
berlin
data('berlin')
berlin
ls()
apotheke.df
my_location = sf::st_centroid(my_location)
my_location = sf::st_coordinates(my_location)
my_location
my_location = data.frame(my_location)
my_location
colnames(my_location) = c('lon', 'lat')
my_location
idx = 4
sf_obj = dat[idx, ]
sf_obj = sf::st_centroid(sf_obj)
sf_obj = sf::st_coordinates(sf_obj)
sf_obj = data.frame(sf_obj)
colnames(sf_obj) = c('lon', 'lat')
sf_obj = dat[idx, ]
sf_obj
idx = 4
sf_obj = dat[idx, ]
sf_obj = suppressWarnings(sf::st_centroid(sf_obj))
sf_obj = sf::st_coordinates(sf_obj)
sf_obj = data.frame(sf_obj)
colnames(sf_obj) = c('lon', 'lat')
sf_obj
my_location
route = osrm::osrmRoute(src = my_location,
dst = sf_obj,
overview = "full",
returnclass = "sf")
route
maptiles::
osm = maptiles::get_tiles(x = route, crop = TRUE, zoom = 13)
tmp_file = tempfile(fileext = '.png')
png(filename = tmp_file, width = 450, height = 450)
par(mar = c(0,0,0,0))
maptiles::plot_tiles(osm)
mapview::mapview(route)
viz_mpv = mapview::mapview(x = route,
color = "red",
map.types = leaflet::providers$OpenStreetMap.Mapnik)
route_view = mapview::mapview(x = route,
color = "red",
map.types = leaflet::providers$OpenStreetMap.Mapnik)
route_view
?osrm::osrmRoute
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
load_green_spaces = readRDS('/home/lampros/add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon/data/municipality_contains_green_spaces.RDS')
load_green_spaces
str(load_green_spaces)
idx = which(load_green_spaces$name == "")
length(idx)
tmp = load_green_spaces[-idx, ]
dim(tmp)
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/CASSINI_HACKATHON_Staying_fit_and_healthy/shiny_cassini_hackathon')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
runApp('add_GITHUB_PRIVATE/ShinyCassiniHackathon/app')
Sys.getenv('BILLING_BQ')
?strftime
rst = raster::raster('/home/lampros/Downloads/TERRASARX_TIF_FILES/temporary/img_bnd_1.tif')
rst
rst = raster::raster('/home/lampros/Downloads/TERRASARX_TIF_FILES/temporary/img_bnd_2.tif')
rst
d = sf::read_sf('/home/lampros/Downloads/Met/meteoriteDataQGIS.shp')
d
dd = sf::read_sf('/home/lampros/Downloads/Met/meteoriteLandings.qgz')
mapview::mapview(d)
mapview::mapview(d, zcol = 'mass')
16.25-7.5
library(ggplot2)
library(sf)
#> Linking to GEOS 3.5.0, GDAL 2.1.0, proj.4 4.8.0
con <- url("https://biogeo.ucdavis.edu/data/gadm3.6/Rsf/gadm36_PAK_3_sf.rds")
pakistan.gadm <- readRDS(con) %>% st_transform("+proj=laea +lat_0=31 +lon_0=69 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs")
x <- Sys.time()
ggplot() + geom_sf(data = st_simplify(pakistan.gadm, 10000), aes(fill = NAME_3)) +
guides(fill = FALSE)
library(sf)
#> Linking to GEOS 3.6.1, GDAL 2.1.3, proj.4 4.9.3
con <- url("https://biogeo.ucdavis.edu/data/gadm3.6/Rsf/gadm36_PAK_3_sf.rds")
pakistan.gadm <- readRDS(con) %>%
st_transform("+proj=laea +lat_0=31 +lon_0=69 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs")
pakistan.simple <- st_simplify(pakistan.gadm, 1e4)
library(ggplot2)
library(microbenchmark)
p1 <- ggplot() +
geom_sf(data = pakistan.simple, aes(fill = NAME_3)) +
guides(fill = FALSE)
p2 <- ggplot() +
geom_sf(data = pakistan.simple)
microbenchmark(print(p1), print(p2), times = 1)
df <- data.frame(dose=c("D0.5", "D1", "D2"),
len=c(4.2, 10, 29.5))
head(df)
p<-ggplot2::ggplot(df, ggplot2::aes(x=dose, y=len, fill=dose)) +
ggplot2::geom_bar(stat="identity")+ggplot2::theme_minimal()
here::here()
whereami::thisfile()
dirname(sys.frame(1)$ofile)
sys.frame
sys.frame(1)
system('pwd')
library(here)
here()
f = readRDS('/home/lampros/Desktop/ΑΤΟΜΙΚΗ_ΕΠΙΧΕΙΡΗΣΗ/EU_Calls_Proposals/i-Nergy_2021/cloud_instance/pplants_process/sf_object_pplants.RDS')
f
require(sf)
f = readRDS('/home/lampros/Desktop/ΑΤΟΜΙΚΗ_ΕΠΙΧΕΙΡΗΣΗ/EU_Calls_Proposals/i-Nergy_2021/cloud_instance/pplants_process/sf_object_pplants.RDS')
f
1
require(IceSat2R)
cntr_cnt = rnaturalearth::ne_countries(scale = 110,
type = 'countries',
returnclass = 'sf')
cntr_cnt = cntr_cnt[, c('sovereignt', 'continent')]
sort(cntr_cnt$sovereignt)
sort(unique(cntr_cnt$continent))
init = select_aoi_global_grid$new(area_of_interest = 'Antarctica',
verbose = TRUE)
init$draw_edit_aoi(degrees = 5.0, square_geoms = TRUE)
sf_obj = init$selected_areas_global_grid(plot_data = TRUE)
sf_obj
wkt_obj = sf::st_as_text(sf::st_geometry(sf_obj))
wkt_obj
bbx = sf::st_bbox(obj = c(xmin = -73.65234, ymin = 54.16243, xmax = 5.44921, ymax = 84.75448), crs = sf::st_crs(4326))
init = select_aoi_global_grid$new(area_of_interest = bbx,
verbose = TRUE)
init$draw_edit_aoi(degrees = 1.0, square_geoms = TRUE)
sf_obj = init$selected_areas_global_grid(plot_data = TRUE)
wkt_obj = sf::st_as_text(sf::st_geometry(sf_obj))
wkt_obj
getwd()
setwd('/home/lampros/add_GITHUB/IceSat2R')
usethis::use_github_action("lint")
